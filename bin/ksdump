#!/usr/bin/env ruby

require 'optparse'

# Some additional magic to make it work right after repo checkout,
# without installation to proper Ruby library dirs

full_bin_path = File.realpath($PROGRAM_NAME)
dist_path = File.expand_path(File.dirname(full_bin_path) + '/..')

$LOAD_PATH << "#{dist_path}/lib"
$LOAD_PATH << "#{dist_path}/../runtime/ruby/lib"

require 'kaitai/struct/visualizer'

# ======================================================================

options = {:format => 'yaml'}
parser = OptionParser.new do |opts|
  $prog_name = File.basename($PROGRAM_NAME)

  opts.banner = "Usage: #{$prog_name} [options] <file_to_parse.bin> <format.ksy>..."
  opts.separator ""

  opts.on("-I", "--import-path [DIRECTORIES]", ".ksy library search path(s) for imports (see also KSPATH env variable)") do |v|
    options[:import_path] = v
  end

  FORMATS = ['json', 'xml', 'yaml']
  opts.on("-f", "--format FORMAT", FORMATS, "choose dump format - #{FORMATS.join(', ')} (default: #{options[:format]})") do |v|
    options[:format] = v
  end

  opts.on("--version", "show versions of #{$prog_name} and ksc") do |v|
    puts "#{$prog_name} #{Kaitai::Struct::Visualizer::VERSION}"
    system("ksc", "--version")
    exit 0
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts parser
  exit 1
end

if ARGV.size < 2
  puts parser
  exit 1
end

c = Kaitai::Struct::Visualizer::KSYCompiler.new(options)
app = Kaitai::Struct::Visualizer::Parser.new(c, ARGV[0], ARGV[1..-1], options)
app.load

# ======================================================================

def obj_to_h(obj)
  if obj == true or obj == false or obj.is_a?(Numeric) or obj.nil?
    obj
  elsif obj.is_a?(Symbol)
    obj.to_s
  elsif obj.is_a?(String)
    if obj.encoding == Encoding::ASCII_8BIT
      r = ''
      obj.each_byte { |x| r << sprintf('%02X ', x) }
      r.chop!
      r
    else
      obj.encode('UTF-8')
    end
  elsif obj.is_a?(Array)
    obj.map { |x| obj_to_h(x) }
  else
    root = {}
    valid_struct = false

    common_meths = Set.new
    obj.class.ancestors.each { |cl|
      next if cl == obj.class
      valid_struct = true if cl == Kaitai::Struct::Struct
      common_meths.merge(cl.instance_methods)
    }

    return "OPAQUE (#{obj.class.to_s})" if not valid_struct

    inst_meths = Set.new(obj.public_methods) - common_meths
    inst_meths.sort.each { |meth|
      k = meth.to_s
      next if k =~ /^_/ # or attrs.include?(k)

      el = obj.send(meth)
      v = obj_to_h(el)
      root[k] = v unless v.nil?
    }

#    obj.instance_variables.each { |k|
#      k = k.to_s
#      next if k =~ /^@_/
#      el = obj.instance_eval(k)
#      root[k[1..-1]] = obj_to_h(el)
#    }
    root
  end
end

tree = obj_to_h(app.data)
r = nil

case options[:format]
when 'json'
  require 'json'
  r = JSON.pretty_generate(tree)
when 'xml'
  require 'active_support'
  require 'active_support/core_ext'
  r = tree.to_xml
when 'yaml'
  require 'yaml'
  r = tree.to_yaml
  r = r[4..-1] if r[0..3] == "---\n"
end

print r
